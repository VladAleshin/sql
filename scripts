
1. Game Play Analysis I 
2. Game Play Analysis II
select 
	a.player_id,
	a.device_id
from
	Activity a
join (
	select	
		player_id,
		MIN(event_date) event_date
	from
		Activity
	group by 
		player_id	
) t on a.player_id = t.player_id and a.event_date = t.event_date	

3. Employee Bonus
select 
	name,
	isnull(bonus, 0) bonus
from
	 Employee3 e
left join Bonus b on e.empId = b.empId	 
where ISNULL(b.bonus, 0) < 1000

 4. Find Customer Referee
 5. Game Play Analysis II
 select 
	t1.player_id,
	t1.event_date,
	sum(t2.games_played) games_played_so_far
from	
	Activity t1
left join Activity t2 on t1.player_id = t2.player_id and t1.event_date >= t2.event_date
group by
	t1.player_id,
	t1.event_date
order by t1.player_id

6. Game Play Analysis IV

select distinct
	round(cast(count(distinct t1.player_id) as numeric) / (select count(distinct player_id) from Activity), 2)
from	
	Activity t1
join Activity t2 on t1.player_id = t2.player_id and
DATEDIFF(DAY, t2.event_date, t1.event_date) = 1

7. Managers with at Least 5 Direct Reports
SELECT Name FROM Employee WHERE Id IN 
(SELECT ManagerId FROM Employee GROUP BY ManagerId HAVING COUNT(ManagerId) > 4);

8. Winning Candidate 
select top 1 with ties
	Name
from 
	Candidate t1
left join Vote t2 on t1.Id =t2.CandidateId
group by 
	Name
order by
	COUNT(Name) desc
	
9. Count Student Number in Departments
select
	dept_name,
	COUNT(distinct student_id) student_number,
	COUNT(*)	
from
	Department t1
left join Student t2 on t1.dept_id = t2.dept_id			
group by dept_name
order by COUNT(distinct student_id) desc


10. Friend Requests II: Who Has Most Friend?

with cte as ( 
select 
	requester_id id_person
from 
	request_accepted

union all

select 
	accepter_id
from 
	request_accepted
)

select top 1
	id_person	
from cte
group by
	 id_person
order by 
	 COUNT(id_person) desc



11. Tree Node (Write a query to print the node id and the type of the node. Sort your output by the node id. The result for the above sample is: )

select 
	id,
	case 
		when p_id is null then 'Root'
		when id in (select distinct p_id from tree) then 'Inner'
		else 'Leaf'
	end Type
from
	tree	
order by id	

12. Exchange Seats
select 
	t1.id,	
	case
		when t2.id is null and t3.id is null then t1.student 
		when t2.id is null then t3.student
		when t3.id is null then t2.student		
	end	student
from
	seat t1
left join seat t2 on t1.id = t2.id - 1 and t1.id % 2 = 1			
left join seat t3 on t1.id = t3.id + 1 and t1.id % 2 = 0

	



 
